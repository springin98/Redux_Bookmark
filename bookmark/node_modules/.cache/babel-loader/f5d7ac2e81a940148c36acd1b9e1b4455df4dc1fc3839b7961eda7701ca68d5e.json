{"ast":null,"code":"const BOOKMARKTRUE = \"bookmark/BOOKMARKTRUE\";\nconst BOOKMARKFALSE = \"bookmark/BOOKMARKFALSE\";\n//액션명은 대문자\n//액션명 앞에 경로를 넣으면, 나중에 이름이 겹치지 않는다.\n\nexport const bookmarkTrue = id => ({\n  type: BOOKMARKTRUE,\n  //type은 액션 이름이라고 생각하면 된다.\n  id: id\n  //인자로 받은 id를 여기에 저장한다.\n  //인자는 이따가 dummy의 id를 넣어줄 것이다.\n});\n\nexport const bookmarkFalse = id => ({\n  type: BOOKMARKTRUE,\n  id: id\n});\n//선언과 동시에 내보낸다. export const\n//액션은 리덕스 스토어 안에 있는 변수 값을 바꾸는 애라고 생각하면 된다.\n//여기서 변수는 초기값이다.\n\nconst initialID = {\n  trueID: []\n};\n//초기값을 설정한다.\n//여기에 북마크 설정된 id 값이 배열로 들어갈 것이다.\n//반드시 객체 형태로 해야 한다. 문법 규칙이다. 객체로 받기 때문에.\n\nfunction bookmark() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialID;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  //state는 상태를 말한다. 이것도 문법이라고 생각.\n  //처음 값을 위에서 정의한 initialID를 넣는다.\n  switch (action.type) {\n    case BOOKMARKTRUE:\n      return {\n        ...state,\n        //현재 상태를 반환한다.\n        trueID: state.trueID.concat(action.id)\n      };\n    //BOOKMARKTRUE가 실행되면\n    //trueID 배열 위에 action.id 아까 인자로 받은 id를 추가한다.\n    case BOOKMARKFALSE:\n      return {\n        ...state,\n        trueID: state.trueID.filter(id => id !== String(action.id))\n      };\n    //BOOKMARKFALSE가 실행되면\n    //trueID 배열에 인자로 받은 id가 있는지 확인하고, 있으면 없앤다.\n    default:\n      return state;\n  }\n}\nexport default bookmark;\n//export default는 1개만 존재\n\n//이제 리덕스 함수 bookmark를 실행하기 위해 container로 넘어간다.","map":{"version":3,"names":["BOOKMARKTRUE","BOOKMARKFALSE","bookmarkTrue","id","type","bookmarkFalse","initialID","trueID","bookmark","state","action","concat","filter","String"],"sources":["C:/Users/NTX550/Desktop/ASAC_B/ASAC_B/bookmark/src/modules/bookmark.js"],"sourcesContent":["const BOOKMARKTRUE = \"bookmark/BOOKMARKTRUE\";\r\nconst BOOKMARKFALSE = \"bookmark/BOOKMARKFALSE\";\r\n//액션명은 대문자\r\n//액션명 앞에 경로를 넣으면, 나중에 이름이 겹치지 않는다.\r\n\r\nexport const bookmarkTrue = (id) => ({\r\n  type: BOOKMARKTRUE,\r\n  //type은 액션 이름이라고 생각하면 된다.\r\n  id: id,\r\n  //인자로 받은 id를 여기에 저장한다.\r\n  //인자는 이따가 dummy의 id를 넣어줄 것이다.\r\n});\r\n\r\nexport const bookmarkFalse = (id) => ({\r\n  type: BOOKMARKTRUE,\r\n  id: id,\r\n});\r\n//선언과 동시에 내보낸다. export const\r\n//액션은 리덕스 스토어 안에 있는 변수 값을 바꾸는 애라고 생각하면 된다.\r\n//여기서 변수는 초기값이다.\r\n\r\nconst initialID = {\r\n  trueID: [],\r\n};\r\n//초기값을 설정한다.\r\n//여기에 북마크 설정된 id 값이 배열로 들어갈 것이다.\r\n//반드시 객체 형태로 해야 한다. 문법 규칙이다. 객체로 받기 때문에.\r\n\r\nfunction bookmark(state = initialID, action) {\r\n  //state는 상태를 말한다. 이것도 문법이라고 생각.\r\n  //처음 값을 위에서 정의한 initialID를 넣는다.\r\n  switch (action.type) {\r\n    case BOOKMARKTRUE:\r\n      return {\r\n        ...state, //현재 상태를 반환한다.\r\n        trueID: state.trueID.concat(action.id),\r\n      };\r\n    //BOOKMARKTRUE가 실행되면\r\n    //trueID 배열 위에 action.id 아까 인자로 받은 id를 추가한다.\r\n    case BOOKMARKFALSE:\r\n      return {\r\n        ...state,\r\n        trueID: state.trueID.filter((id) => id !== String(action.id)),\r\n      };\r\n    //BOOKMARKFALSE가 실행되면\r\n    //trueID 배열에 인자로 받은 id가 있는지 확인하고, 있으면 없앤다.\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default bookmark;\r\n//export default는 1개만 존재\r\n\r\n//이제 리덕스 함수 bookmark를 실행하기 위해 container로 넘어간다.\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAC5C,MAAMC,aAAa,GAAG,wBAAwB;AAC9C;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAIC,EAAE,KAAM;EACnCC,IAAI,EAAEJ,YAAY;EAClB;EACAG,EAAE,EAAEA;EACJ;EACA;AACF,CAAC,CAAC;;AAEF,OAAO,MAAME,aAAa,GAAIF,EAAE,KAAM;EACpCC,IAAI,EAAEJ,YAAY;EAClBG,EAAE,EAAEA;AACN,CAAC,CAAC;AACF;AACA;AACA;;AAEA,MAAMG,SAAS,GAAG;EAChBC,MAAM,EAAE;AACV,CAAC;AACD;AACA;AACA;;AAEA,SAASC,QAAQ,GAA4B;EAAA,IAA3BC,KAAK,uEAAGH,SAAS;EAAA,IAAEI,MAAM;EACzC;EACA;EACA,QAAQA,MAAM,CAACN,IAAI;IACjB,KAAKJ,YAAY;MACf,OAAO;QACL,GAAGS,KAAK;QAAE;QACVF,MAAM,EAAEE,KAAK,CAACF,MAAM,CAACI,MAAM,CAACD,MAAM,CAACP,EAAE;MACvC,CAAC;IACH;IACA;IACA,KAAKF,aAAa;MAChB,OAAO;QACL,GAAGQ,KAAK;QACRF,MAAM,EAAEE,KAAK,CAACF,MAAM,CAACK,MAAM,CAAET,EAAE,IAAKA,EAAE,KAAKU,MAAM,CAACH,MAAM,CAACP,EAAE,CAAC;MAC9D,CAAC;IACH;IACA;IACA;MACE,OAAOM,KAAK;EAAC;AAEnB;AAEA,eAAeD,QAAQ;AACvB;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}